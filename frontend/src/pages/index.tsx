import { useState, type ReactNode } from "react";
import { Button, Center, Flex, Image, Text, Title } from "@mantine/core";
import Head from "next/head";

export default function Home(): ReactNode {
  const [keywords, setKeywords] = useState<string | undefined>(undefined);
  const [recipe, setRecipe] = useState<{
    name: string | undefined;
    imageUrl: string | undefined;
    text:
      | {
          ingredients: Array<{ name: string; amount: string }>;
          steps: string[];
          tips: string[];
        }
      | undefined;
  }>({
    name: undefined,
    imageUrl: undefined,
    text: undefined,
  });

  const [error, setError] = useState<Error | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const getRecipe = async () => {
    setKeywords("肉料理 韓国料理 味濃いめ");
    setIsLoading(true);
    setError(null);

    try {
      if (!keywords) return;
      const response = await fetch(
        `/api/recipe?keywords=${encodeURIComponent(keywords)}`
      );
      if (!response.ok) {
        throw new Error("An error occurred while fetching the data.");
      }
      const newData = await response.json();
      setRecipe(newData);
    } catch (error) {
      setError(error as Error);
      setRecipe({
        name: "何の成果も！！得られませんでした！！",
        imageUrl: undefined,
        text: undefined,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Qin App Team A</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Center maw={1000} mx="auto">
        <Flex
          mih={50}
          gap="xl"
          justify="center"
          align="center"
          direction="column"
          wrap="nowrap"
        >
          <Title sx={{ color: "red" }}>{`Hello World ${
            recipe.name ? recipe.name : "たかし"
          }`}</Title>
          {recipe.imageUrl ? (
            <Image
              maw={500}
              h={500}
              mah={500}
              mx="auto"
              fit="cover"
              radius="md"
              src={recipe.imageUrl}
              alt="recipe image"
            />
          ) : null}
          {recipe.text?.ingredients.map((ingredient, index) => (
            <Text
              variant="gradient"
              gradient={{ from: "indigo", to: "cyan", deg: 45 }}
              sx={{
                fontFamily: "Greycliff CF, sans-serif",
                overflow: "hidden",
              }}
              ta="left"
              fz="xl"
              fw={700}
              key={ingredient.name}
            >
              {`${index + 1}:  ${ingredient.name} ${ingredient.amount}`}
            </Text>
          ))}
          {recipe.text?.steps.map((step, index) => (
            <Text
              variant="gradient"
              gradient={{ from: "teal", to: "lime", deg: 45 }}
              sx={{ fontFamily: "Greycliff CF, sans-serif" }}
              ta="left"
              fz="xl"
              fw={700}
              key={step}
            >
              {`${index + 1}:  ${step}`}
            </Text>
          ))}
          {recipe.text?.tips.map((tip, index) => (
            <Text
              variant="gradient"
              gradient={{ from: "yellow", to: "", deg: 45 }}
              sx={{ fontFamily: "Greycliff CF, sans-serif" }}
              ta="left"
              fz="xl"
              fw={700}
              key={tip}
            >
              {`${index + 1}:  ${tip}`}
            </Text>
          ))}
          <Button color="yellow" onClick={getRecipe}>
            コレシピ！！！
          </Button>
          {isLoading && <p>Loading...</p>}
          {error != null && <p>Error: {error.message}</p>}
        </Flex>
      </Center>
    </>
  );
}
